#!/usr/bin/env python3

import sys
from collections import Counter


def worst_error(verdicts):
    sorting_order = ['JE', 'IF', 'RTE', 'MLE', 'TLE', 'OLE', 'WA', 'PE', 'AC']
    verdicts += ['AC']
    index = min(sorting_order.index(verdict) for verdict in verdicts)
    return sorting_order[index]

def first_error(verdicts):
    for verdict in verdicts:
        if verdict != 'AC':
            return verdict
    return 'AC'

def always_accept(verdicts):
    return 'AC'

def plurality_wins(verdicts):
    if len(verdicts) == 0:
        return 'PAC'
    common = Counter(verdicts).most_common() + [(0, 'AA')] * 3
    if common[0][1] == common[1][1]:
        if common[1][1] == common[2][1]:
            return 'PAC'
        else:
            if 'AC' in (common[0][0], common[1][0]) and 'PAC' in (common[0][0], common[1][0]):
                return 'AC'
            elif 'WA' in (common[0][0], common[1][0]) and 'PAC' in (common[0][0], common[1][0]):
                return 'WA'
            else:
                return 'PAC'
    else:
        return common[0][0]

def majority_wins(verdicts):
    if len(verdicts) == 0:
        return 'PAC'
    common = Counter(verdicts) + [(0, 'AA')] * 3
    if common[0][1] * 2 >= len(verdicts):
        if common[0][1] == common[1][1]:
            if 'AC' in (common[0][0], common[1][0]) and 'PAC' in (common[0][0], common[1][0]):
                return 'AC'
            elif 'WA' in (common[0][0], common[1][0]) and 'PAC' in (common[0][0], common[1][0]):
                return 'WA'
            else:
                return 'PAC'
        else:
            return common[0][0]
    else:
        return 'PAC'

def all_wins(verdicts):
    if len(set(iterator)) == 1:
        return verdicts[0]
    else:
        return 'PAC'

verdict_aggregators = {
    'worst_error': worst_error,
    'no_errors': worst_error,
    'first_error': first_error,
    'always_accept': always_accept,
    'plurality_wins': plurality_wins,
    'majority_wins': majority_wins,
    'all_wins': all_wins
}


def avg(scores):
    return 1.0*sum(scores) / len(scores)

score_aggregators = {
    'sum': sum,
    'avg': avg,
    'max': max,
    'min': min
}


aggregate_scores = score_aggregators['sum']
aggregate_verdicts = verdict_aggregators['worst_error']
ignore_sample = False
accept_if_any_accepted = False

for flag in sys.argv:
    if flag in score_aggregators:
        aggregate_scores = score_aggregators[flag]
    if flag in verdict_aggregators:
        aggregate_verdicts = verdict_aggregators[flag]
    if flag == 'ignore_sample':
        ignore_sample = True
    if flag == 'accept_if_any_accepted':
        accept_if_any_accepted = True

try:
    data = sys.stdin.read().split()
    verdicts = data[0::2]
    scores = list(map(float, data[1::2]))
    assert len(verdicts) == len(scores)
    if ignore_sample:
        assert 1 <= len(verdicts) <= 2
        verdicts = verdicts[-1:]
        scores = scores[-1:]
    if accept_if_any_accepted and 'AC' in verdicts:
        verdict = 'AC'
    else:
        verdict = aggregate_verdicts(verdicts)
    score = aggregate_scores(scores)
    print('%s %f' % (verdict, score))
except:
    print('JE')
